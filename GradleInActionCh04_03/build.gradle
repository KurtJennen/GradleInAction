//buildSrc
import external.ReleaseVersionTask

//apply plugin: 'java'
//apply plugin: 'war'
apply plugin: 'jetty'

//version = 0.1
sourceCompatibility = 1.8

jar {
	manifest {
		attributes 'Main-Class': 'ToDoApp'
	}
}

/*sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
	}
	test {
		java {
			srcDirs = ['test']
		}
	}
}

buildDir = 'out' */

repositories {
	mavenCentral()
}

dependencies {
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
	
	providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.0'
	runtime group: 'javax.servlet', name: 'jstl', version: '1.2'
	runtime group: 'taglibs', name: 'standard', version: '1.1.2'
}

jettyRun {
	httpPort = 9090
	contextPath = 'todo'
}

task wrapper(type: Wrapper){
	gradleVersion = '3.5'
}

//task dependencies
version = '0.1-SNAPSHOT'

task printVersion {
	doFirst {
		println "Before reading the project version"
	}
	doLast {
		println "Version: $version"
	}
}

//
printVersion.doFirst {println "First action"}
printVersion << { println "Last action"}

//
task printVersion1(group: 'versioning', description: 'Prints project version.') << {
	logger.quiet "Version: $version"
}

//
task printVersion2 {
	group = 'versioning'
	description = 'Prints project version.'

	doLast {
		logger.quiet "Version: $version"
	}
}

//
task first << { println "first"}
task second << { println "second"}

task printVersion3(dependsOn: [second, first]) << {
	logger.quiet "Version: $version"
}

task third << { println "third"}
third.dependsOn('printVersion3')

//
task fourth << { println "fourth"}
task fifth << { println "fifth"}
fourth.finalizedBy fifth

//pogo
version = new ProjectVersion(0, 1)

class ProjectVersion {
	Integer major
	Integer minor
	Boolean release
	
	ProjectVersion(Integer major, Integer minor) {
		this.major = major
		this.minor = minor
		this.release = Boolean.FALSE
	}
	
	ProjectVersion(Integer major, Integer minor, Boolean release) {
		this(major, minor)
		this.release = release
	}
	
	@Override
	String toString() {
		"$major.$minor${release ? '' : '-SNAPSHOT'}"
	}
}

//task configuration
ext.versionFile = file('version.properties')

task loadVersion {
	project.version = readVersion()
}

ProjectVersion readVersion() {
	logger.quiet 'Reading the version file.'
	
	if(!versionFile.exists()) {
		throw new GradleException("Required information does not exists: $versionFile.canonicalPath")
	}
	
	Properties versionProps = new Properties()
	
	versionFile.withInputStream {stream -> versionProps.load(stream)}
	
	new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

//release task
task makeReleaseVersion(group: 'versioning', description: 'Makes project a release version.') << {
	version.release = true
	ant.propertyfile(file: versionFile) {
		entry(key: 'release', type: 'string', operation: '=', value: 'true')
	}
}

//input and outputs
task makeReleaseVersion1(group: 'versioning', description: 'Makes project a release version.') {
	inputs.property('release', version.release)
	outputs.file versionFile

	doLast { 
		version.release = true
		ant.propertyfile(file: versionFile) {
			entry(key: 'release', type: 'string', operation: '=', value: 'true')
		}
	}
}

//custom task
/*class ReleaseVersionTask extends DefaultTask {
	@Input Boolean release
	@OutputFile File destFile
	
	ReleaseVersionTask() {
		group = 'versioning'
		description = 'Makes project a release version.'
	}
	
	@TaskAction
	void start() {
		project.version.release = true
		ant.propertyfile(file: destFile) {
			entry(key: 'release', type: 'string', operation: '=', value: 'true')
		}
	}
}*/

//custom task usage
task makeReleaseVersion2(type: ReleaseVersionTask) {
	release = version.release
	destFile = versionFile
}

//build-in tasks
//task createDistribution(type: Zip, dependsOn: makeReleaseVersion2) {
//lifecycle ehook
task createDistribution(type: Zip) {
	from war.outputs.files
	
	from(sourceSets*.allSource) {
		into 'src'
	}
	
	from(rootDir) {
		include versionFile.name
	}
}

task backupReleaseDistribution(type: Copy) {
	from createDistribution.outputs.files
	into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
	logger.quiet 'Releasing the project...'
}

//task rule
/*task incrementMajorVersion(group: 'versioning', description: 'Increments project major version.') << {
	String currentVersion = version.toString()
	++version.major
	String newVersion = version.toString()
	
	logger.info "Incrementing major project version: $currentVersion -> $newVersion"
	
	ant.propertyfile(file: versionFile) {
		entry(key: 'major', type: 'int', operation: '+', value: 1)
	}
}

task incrementMinorVersion(group: 'versioning', description: 'Increments project major version.') << {
	String currentVersion = version.toString()
	++version.minor
	String newVersion = version.toString()
	
	logger.info "Incrementing major project version: $currentVersion -> $newVersion"
	
	ant.propertyfile(file: versionFile) {
		entry(key: 'minor', type: 'int', operation: '+', value: 1)
	}
}*/

tasks.addRule("Pattern: increment<Classifier>Version - Increments the project version classifier.") {
	String taskName -> if(taskName.startsWith('increment') && taskName.endsWith('Version')) {
		task(taskName) << {
			String classifier = (taskName - 'increment' - 'Version').toLowerCase()
			String currentVersion = version.toString();
			
			switch(classifier) {
				case 'major':
					++version.major
					break
				case 'minor':
					++version.minor
					break
				default:
					throw new GradleException("Invalid version type '$classifier. Allowed types: ['Major', 'Minor']")
			}
			
			String newVersion = version.toString()
			logger.info "Rule Incrementing $classifier project version:  $currentVersion -> $newVersion"
			
			ant.propertyfile(file: versionFile) {
				entry(key: classifier, type: 'int', operation: '+', value: 1)
			}
		}
	}
}


//lifecycle hook
/*gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
	if(taskGraph.hasTask(release)) {
		if(!version.release) {
			project.version.release = true
			ant.propertyfile(file: versionFile) {
				entry(key: 'release', type: 'string', operation: '=', value: 'true')
			}
		}
	}	
}*/

//lifecycle hook listener
class ReleaseVersionListener implements TaskExecutionGraphListener {
	final static String releaseTaskPath = ':release'
	
	@Override
	void graphPopulated(TaskExecutionGraph taskGraph) {
		if(taskGraph.hasTask(releaseTaskPath)) {
			println "Lifecycle hook listener"
			List<Task> allTasks = taskGraph.allTasks
			Task releaseTask = allTasks.find{it.path == releaseTaskPath}
			Project project = releaseTask.project
			
			if(!project.version.release) {
				project.version.release = true
				project.ant.propertyfile(file: project.versionFile) {
					entry(key: 'release', type: 'string', operation: '=', value: 'true')
				}
			}
		}
	}
}

def releaseVersionListener = new ReleaseVersionListener()
gradle.taskGraph.addTaskExecutionGraphListener(releaseVersionListener)
