apply plugin: 'groovy'
apply plugin: 'announce'

repositories {
	mavenCentral()
}
	
dependencies {
	compile project(':model')
	
	runtime 'com.h2database:h2:1.3.170'
	
	testCompile 'junit:junit:4.11'
	testCompile 'org.testng:testng:6.8'
	testCompile 'org.codehaus.groovy:groovy:2.0.6'
	testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

sourceSets {
	integrationTest {
		java.srcDir file('src/integTest/java')
		resources.srcDir file('src/integTest/resources')
		compileClasspath = sourceSets.main.output + configurations.testRuntime
		runtimeClasspath = output + compileClasspath
	}
}

//not needed
//test.useTestNG() 

//not needed
/*task testNG(type: Test) {
	useTestNG()
}

test.dependsOn testNG

task aggregateTestReports(type: TestReport) {
	destinationDir = test.reports.html.destination
	reportOn test, testNG
}

check.dependsOn aggregateTestReports*/

test {
	systemProperty 'items', '20'
	minHeapSize = '128m'
	maxHeapSize = '256m'
	jvmArgs '-XX:MaxMetaspaceSize=128m'
	forkEvery = 1
	maxParallelForks = Runtime.runtime.availableProcessors() / 2
	
	testLogging {
		showStandardStreams=true
		exceptionFormat 'full'
		events 'started', 'passed', 'skipped', 'failed'
	}
	
	exclude '**/*IntegTest.class'
	reports.html.destination = file ("$reports.html.destination/unit")
	reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}

test.afterSuite {TestDescriptor suite, TestResult result ->
	if(!suite.parent && result.getTestCount() > 0) {
		long elapsedTestTime = result.getEndTime() - result.getStartTime()
		announce.announce("""Elapsed time for execution of ${result.getTestCount()} test(s): $elapsedTestTime ms""", 'local')
		
	}	
}

test.addTestListener(new NotificationTestListener(project))

class NotificationTestListener implements TestListener {
	final Project project
	
	NotificationTestListener(Project project) {
		this.project = project
	}
	
	@Override
	void afterSuite(TestDescriptor suite, TestResult result) {
		if(!suite.parent && result.getTestCount() > 0) {
			long elapsedTestTime = result.getEndTime() - result.getStartTime()
			project.announce.announce("Elapsed time for execution of ${result.getTestCount()} test(s): $elapsedTestTime ms", 'local')
		}	
	}
	
	@Override
	void afterTest(TestDescriptor testDescriptor, TestResult result) {}
	
	@Override
	void beforeSuite(TestDescriptor suite) {}
	
	@Override
	void beforeTest(TestDescriptor testDescriptor) {}
}

task integrationTest(type: Test) {
	//include '**/*IntegTest.class'
	//reports.html.destination = file ("$reports.html.destination/integration")
	//reports.junitXml.destination = file("$reports.junitXml.destination/integration")
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest